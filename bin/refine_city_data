#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const request = require('request');

// TODO: include attributions on the UI
const countriesInputUrl = 'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.json';
const citiesInputPath = path.resolve(__dirname, 'simplemaps_worldcities_basicv1.6', 'worldcities.csv');
const outputPath = path.resolve(__dirname, '..', 'src', 'assets', 'cities.json');

request(countriesInputUrl, { json: true }, (err, res, body) => {
  if (err) {
    throw err;
  }

  // mapping from country id to country name
  const countryNames = {};
  const subcontinentNames = {};
  const continentNames = {};

  // mapping from country iso2 to country/subcontinent/continent ids
  const countries = {};

  // initiate the mappings
  body.forEach(country => {
    const {
      'country-code': countryId,
      'alpha-2': countryIso2,
      'name': countryName,
      'sub-region-code': subcontinentId,
      'sub-region': subcontinentName,
      'region-code': continentId,
      'region': continentName,
    } = country;

    countries[countryIso2] = {
      countryId,
      subcontinentId,
      continentId,
    };

    countryNames[countryId] = countryName;
    subcontinentNames[subcontinentId] = subcontinentName;
    continentNames[continentId] = continentName;
  });

  // mapping from city id to city obj
  const cities = {};

  const citiesCsv = fs.readFileSync(citiesInputPath, 'utf8');
  csv2json(citiesCsv)
    .filter(city => city.population > 100_000)
    .forEach(city => {
      cities[city.id] = {
        ...countries[city.iso2],
        name: city.city_ascii,
        lat: +city.lat,
        lng: +city.lng,
        population: +city.population,
      };
    });

  // write json
  const content = {
    cities,
    countryNames,
    subcontinentNames,
    continentNames,
  };
  fs.writeFileSync(outputPath, JSON.stringify(content), 'utf8');
});

// convert csv to json
function csv2json(csv) {
  const [headerRow, ...rows] = csv
    .split('\r\n')
    .map(v => {
        const matches = [...v.matchAll(/"([^"]*)"/g)];
        return matches.map(match => match[1]);
      },
    );
  return rows
    .map(values => {
      const dictionary = {};
      headerRow.forEach((label, i) => {
        dictionary[label] = values[i];
      });
      return dictionary;
    });
}
