{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app-routing.module.ts","webpack:///src/app.component.ts","webpack:///src/app.component.html","webpack:///src/app.module.ts","webpack:///src/components/line-chart-audification/line-chart-audification.component.ts","webpack:///src/components/line-chart-audification/line-chart-audification.component.html","webpack:///src/components/line-chart-audification/line-chart-audification.module.ts","webpack:///src/components/line-chart/line-chart.component.ts","webpack:///src/components/line-chart/line-chart.module.ts","webpack:///src/d3/base.d3.ts","webpack:///src/d3/line-chart.d3.ts","webpack:///src/d3/xy-chart.d3.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/models/data-cube/data-cube.model.ts","webpack:///src/models/data-cube/filters.ts","webpack:///src/models/data-cube/generation.ts","webpack:///src/models/data-cube/presets.ts","webpack:///src/models/data-cube/types.ts","webpack:///src/pages/audification-experiment/audification-experiment.component.ts","webpack:///src/pages/audification-experiment/audification-experiment.component.html","webpack:///src/pages/audification-experiment/audification-experiment.module.ts","webpack:///src/services/audification/audification.module.ts","webpack:///src/services/audification/audification.service.ts","webpack:///src/services/data/data.module.ts","webpack:///src/services/data/data.service.ts","webpack:///crypto (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","bootstrap","LineChartAudificationComponent","component","audificationService","state","disposeMelody","audify","playMelody","LineChartAudificationModule","LineChartComponent","dataService","element","height","width","marginTop","marginRight","marginBottom","marginLeft","lineChartD3","changes","apply","getMeasureOverDays","measureName","template","LineChartModule","BaseD3","elementRef","container","nativeElement","renderOptions","unapply","teardown","render","undefined","LineChartD3","svg","data","scaleX","scaleY","line","defined","d","isNaN","value","x","date","y","append","datum","attr","XYChartD3","join","domain","range","nice","call","ticks","tickSizeOuter","g","select","clone","text","appendChart","remove","environment","production","bootstrapModule","err","console","error","DataCube","rows","measures","categories","categoryNames","measureNames","filters","sortBy","measureIndices","map","name","findIndex","measure","categoryIndices","category","categoryTrie","children","filterFuncs","filter","row","every","forEach","trieNode","categoryIndex","header","values","entries","index","measureIndex","result","labelList","traverseNode","node","push","Map","label","Object","child","pop","normalizeNthDay","sortResults","includes","largestNthDay","Math","max","get","nthDay","set","results","getComparator","sortConcept","a","b","aCategory","bCategory","comparators","combinedComparator","comparator","sort","millisecondsPerDay","betweenDates","startDate","endDate","nThDayIndex","startIndex","round","Date","now","getTime","endIndex","generateCube","settings","completeSettings","defaultSettings","actualCategories","nthDayCategory","generateNthDay","days","dailyStdDev","generateEmptyRows","cumulativeWeights","generateCumulativeWeights","generateHits","generateUsersAndSessions","avgHits","hitStdDev","avgUsers","userStdDev","avgSessionsPerUser","sessionsPerUserStdDev","userCount","sessionThunk","sessions","i","user","rowsSeen","Set","userSessions","j","getNormalizedWeights","total","reduce","accumulator","weight","binarySearch","arr","probe","start","end","length","len","generateMeasureIncrement","type","COUNT","hitTotal","placementThunk","placement","session","rowIndex","newSession","has","newUser","add","scope","EVENT","SESSION","USER","categoryValueIndices","weights","nameToWeightMapping","rowWeights","weightDelta","dailyVariance","dailyThunk","day","countryCategory","browserCategory","sourceCategory","activeUserMeasure","revenueMeasure","SUM","eventCountMeasure","MeasureType","Scope","AudificationExperimentComponent","AudificationExperimentModule","AudificationModule","providers","AudificationService","synth","toDestination","pitchRange","duration","part","time","event","triggerAttackRelease","note","dur","dispose","stop","DataModule","DataService","dataCube","categoryName","local","minus","getDataFor","toJSDate","plus"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'guide-doge';\n}\n","<div class=\"container\">\n  <h1>Guide-Doge</h1>\n  <div>top</div>\n  <app-audification-experiment></app-audification-experiment>\n  <div>bottom</div>\n</div>\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AudificationExperimentModule } from './pages/audification-experiment/audification-experiment.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AudificationExperimentModule,\n  ],\n  bootstrap: [\n    AppComponent,\n  ],\n})\nexport class AppModule {\n}\n","import { Component, Host } from '@angular/core';\nimport { LineChartComponent } from '../line-chart/line-chart.component';\nimport { AudificationService } from '../../services/audification/audification.service';\nimport * as Tone from 'tone';\n\n@Component({\n  selector: 'app-line-chart-audification',\n  templateUrl: './line-chart-audification.component.html',\n})\nexport class LineChartAudificationComponent {\n  public disposeMelody?: () => void;\n\n  constructor(\n    @Host() public component: LineChartComponent,\n    private audificationService: AudificationService,\n  ) {\n  }\n\n  async playMelody() {\n    if (Tone.getContext().state === 'suspended') {\n      await Tone.start();\n    }\n    this.disposeMelody = this.audificationService.audify([], [0, 0], 0);\n  }\n}\n","<div role=\"button\" (focus)=\"playMelody()\" (blur)=\"disposeMelody && disposeMelody()\">\n  Melody\n</div>\n","import { NgModule } from '@angular/core';\nimport { LineChartAudificationComponent } from './line-chart-audification.component';\nimport { AudificationModule } from '../../services/audification/audification.module';\n\n@NgModule({\n  declarations: [\n    LineChartAudificationComponent,\n  ],\n  imports: [\n    AudificationModule,\n  ],\n  exports: [\n    LineChartAudificationComponent,\n  ],\n})\nexport class LineChartAudificationModule {\n}\n","import { Component, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataService } from '../../services/data/data.service';\nimport { LineChartD3 } from '../../d3/line-chart.d3';\n\n@Component({\n  selector: 'app-line-chart',\n  template: `\n    <app-line-chart-audification></app-line-chart-audification>\n  `,\n})\nexport class LineChartComponent implements OnChanges {\n  @Input() height = 500;\n  @Input() width = 800;\n  @Input() marginTop = 20;\n  @Input() marginRight = 30;\n  @Input() marginBottom = 30;\n  @Input() marginLeft = 40;\n  @Input() measureName: string;\n  private lineChartD3: LineChartD3;\n\n  constructor(\n    private dataService: DataService,\n    element: ElementRef,\n  ) {\n    this.lineChartD3 = new LineChartD3(element);\n  }\n\n  get data() {\n    return this.dataService.getMeasureOverDays(this.measureName);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.lineChartD3.apply(this);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LineChartComponent } from './line-chart.component';\nimport { DataModule } from '../../services/data/data.module';\nimport { LineChartAudificationModule } from '../line-chart-audification/line-chart-audification.module';\n\n@NgModule({\n  declarations: [\n    LineChartComponent,\n  ],\n  imports: [\n    DataModule,\n    LineChartAudificationModule,\n  ],\n  exports: [\n    LineChartComponent,\n  ]\n})\nexport class LineChartModule {\n}\n","import { ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\n\ntype Teardown = () => void;\n\nexport abstract class BaseD3<RenderOptions> {\n  protected container = d3.select(this.elementRef.nativeElement);\n  private teardown?: Teardown;\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  apply(renderOptions: RenderOptions) {\n    this.unapply();\n    this.teardown = this.render(renderOptions);\n  }\n\n  unapply() {\n    if (this.teardown) {\n      this.teardown();\n      this.teardown = undefined;\n    }\n  }\n\n  protected abstract render(renderOptions: RenderOptions): Teardown;\n}\n","import { Datum, XYChartD3 } from './xy-chart.d3';\nimport * as d3 from 'd3';\n\nexport class LineChartD3 extends XYChartD3 {\n  protected appendChart(\n    svg: d3.Selection<SVGSVGElement, unknown, null, undefined>,\n    data: Datum[],\n    scaleX: d3.ScaleTime<number, number>,\n    scaleY: d3.ScaleLinear<number, number>,\n  ): void {\n    const line = d3\n      .line<Datum>()\n      .defined(d => !isNaN(d.value))\n      .x(d => scaleX(d.date))\n      .y(d => scaleY(d.value));\n\n    svg\n      .append('path')\n      .datum(data)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 1.5)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round')\n      .attr('d', line);\n  }\n}\n","import * as d3 from 'd3';\nimport { BaseD3 } from './base.d3';\n\nexport interface Datum {\n  date: Date;\n  value: number;\n}\n\nexport interface RenderOptions {\n  data: Datum[];\n  height: number;\n  width: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\nexport abstract class XYChartD3 extends BaseD3<RenderOptions> {\n  protected render({\n                     data,\n                     height, width,\n                     marginTop, marginRight, marginBottom, marginLeft,\n                   }: RenderOptions) {\n    const svg = this.container\n      .append('svg')\n      .attr('viewBox', [0, 0, width, height].join(' '));\n\n    const scaleX = d3\n      .scaleUtc()\n      .domain(d3.extent<Datum, Date>(data, d => d.date) as [Date, Date])\n      .range([marginLeft, width - marginRight]);\n\n    const scaleY = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, d => d.value)!])\n      .nice()\n      .range([height - marginBottom, marginTop]);\n\n    svg\n      .append('g')\n      .attr('transform', `translate(0,${height - marginBottom})`)\n      .call(\n        d3\n          .axisBottom(scaleX)\n          .ticks(width / 80)\n          .tickSizeOuter(0),\n      );\n\n    svg\n      .append('g')\n      .attr('transform', `translate(${marginLeft},0)`)\n      .call(d3.axisLeft(scaleY))\n      // .call(g => g.select('.domain').remove())\n      .call(g =>\n        g\n          .select('.tick:last-of-type text')\n          .clone()\n          .attr('x', 3)\n          .attr('text-anchor', 'start')\n          .attr('font-weight', 'bold')\n          .text('Active Users'),\n      );\n\n    this.appendChart(svg, data, scaleX, scaleY);\n\n    return () => {\n      svg.remove();\n    };\n  }\n\n  protected abstract appendChart(\n    svg: d3.Selection<SVGSVGElement, unknown, null, undefined>,\n    data: Datum[],\n    scaleX: d3.ScaleTime<number, number>,\n    scaleY: d3.ScaleLinear<number, number>,\n  ): void;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Category, Filter, Measure, ResultRow, Row } from './types';\n\n/**\n * This cube is conceptually an n-dimensional array of numbers. The cube\n * represents categories and measures. Each category corresponds to a\n * dimension of the cube. Each category has several different values it can\n * take on. Each category value corresponds to a slice of the cube.\n *\n * For example, look at the following two dimensional cube (i.e. a table):\n *\n *       \\ Chrome \\ Firefox\n * -------+--------+--------\n * USA    |   65   |   78\n * Canada |  101   |   34\n * Mexico |   72   |  156\n *\n * This table has two categories: Country and Browser. Country has three\n * category values: USA, Canada, Mexico, whereas Browser has two: Chrome and\n * Firefox. This cube has only one measure (say, Active Users). So, the table\n * is saying that there were 65 active users from the USA using Chrome.\n * Similarly there were 156 Firefox users from Mexico.\n *\n * The slice represented by USA is the list [65, 78]. The slice represented by\n * Chrome is [65, 101, 72].\n *\n * The cube can support any number of categories, and any number of measures.\n * More categories mean a higher dimensional cube, and more measures means each\n * cell in the cube will be represented by a vector where each element in the\n * vector corresponds to a different measure. Here is a three dimensional\n * (Gender, Source and OS) cube with two measures (Average Visit Duration and\n * Event Count):\n *\n * Male:                              * Female:\n *       \\ Windows \\   Mac  \\  Linux  *       \\ Windows \\   Mac  \\  Linux\n * -------+---------+--------+------- * -------+---------+--------+-------\n * Direct |  5s, 60 | 9s, 23 | 6s, 64 * Direct |  2s, 57 | 6s, 65 | 3s, 34\n * Email  |  7s, 90 | 2s, 98 | 2s, 90 * Email  |  3s, 93 | 4s, 73 | 6s, 72\n * Search |  1s, 32 | 3s, 21 | 4s, 23 * Search |  8s, 86 | 3s, 53 | 5s, 35\n *\n * This cube is saying, for example, that female Linux users coming from\n * Search stayed on the page for an average of 5 seconds.\n *\n * The cube can be queried for specific categories and measures. This\n * will combine together the values for all the other categories and give\n * a breakdown based on the requested categories. For more information, see\n * the documentation for the `getDataFor()` method.\n */\nexport class DataCube {\n  constructor(\n    private readonly rows: Row[],\n    private readonly measures: Measure[],\n    private readonly categories: Category[],\n  ) {\n  }\n\n  /**\n   * Get a breakdown by the given categories in the given measures.\n   *\n   * Breaks down the data in the cube by the given categories and returns\n   * the given measures in a table. So, for the following cube, with\n   * categories Gender, Source and OS and measures Event Count and Sessions:\n   *\n   * Male:                              * Female:\n   *       \\ Windows \\   Mac  \\  Linux  *       \\ Windows \\   Mac  \\  Linux\n   * -------+---------+--------+------- * -------+---------+--------+-------\n   * Direct |  12, 60 |  1, 23 | 44, 64 * Direct |  50, 57 | 43, 65 | 25, 34\n   * Email  |  23, 90 | 51, 98 | 21, 90 * Email  |  39, 93 | 24, 73 | 64, 72\n   * Search |  16, 32 | 10, 21 |  9, 23 * Search |  93, 86 | 38, 53 | 31, 35\n   *\n   * If you get data for the Source category and Sessions measure, the\n   * result would be\n   *\n   * Categories | Measures\n   * -----------+------------\n   * Source     | Sessions\n   * ===========+============\n   * Direct     | 303\n   * Email      | 516\n   * Search     | 250\n   *\n   * The value of the measure Sessions for the category value \"Direct\",\n   * for example, is calculated by adding the the Sessions values\n   * across all the other categories\n   * (across the top row: 60 + 23 + 64 + 57 + 65 + 34). Other category\n   * values are calculated similarly.\n   *\n   * The data can be broken down by multiple categories, and multiple\n   * measures can be provided. For example, given the same cube as before,\n   * with the category names Gender and OS, and measure Event Count, the\n   * resulting table will be:\n   *\n   *    Categories    |  Measures\n   * -----------------+------------\n   * Gender |   OS    | Event Count\n   * =======+=========+============\n   * Male   | Windows | 51\n   * Male   | Mac     | 62\n   * Male   | Linux   | 74\n   * Female | Windows | 182\n   * Female | Mac     | 105\n   * Female | Linux   | 110\n   *\n   * Special handling is applied to the \"nthDay\" category. No matter what\n   * actual day it corresponds to, the earliest nthDay will always correspond\n   * to 0, the second earliest to 1, and so on.\n   *\n   * This method also supports filtering by category or measure values.\n   * Filtering takes place before the counting is done, so it is possible to\n   * filter on categories that are not in the query. By default, nothing is\n   * filtered.\n   *\n   * It's also possible to sort the results by any category or measure.\n   * By default, the results are sorted by the first requested category, then\n   * the second, and so on.\n   *\n   * @param categoryNames The categories to request a breakdown from.\n   * @param measureNames The measures to provide values for.\n   * @param filters The filters to apply to the cube before finding the results.\n   * @param sortBy The concept names to sort in ascending order.\n   */\n  getDataFor(\n    categoryNames: string[],\n    measureNames: string[],\n    filters: Filter[] = [],\n    sortBy?: string[],\n  ): ResultRow[] {\n    const measureIndices = measureNames.map(name =>\n      this.measures.findIndex(measure => measure.name === name),\n    );\n    const categoryIndices = categoryNames.map(name =>\n      this.categories.findIndex(category => category.name === name),\n    );\n    const categoryTrie: TrieNode = { children: {} };\n    const filterFuncs = filters.map(filter =>\n      filter(this.categories, this.measures),\n    );\n    this.rows\n      .filter(row => filterFuncs.every(filter => filter(row)))\n      .forEach(row => {\n        let trieNode = categoryTrie;\n        for (const categoryIndex of categoryIndices) {\n          if (!trieNode.children[row.header[categoryIndex]]) {\n            trieNode.children[row.header[categoryIndex]] = { children: {} };\n          }\n          trieNode = trieNode.children[row.header[categoryIndex]];\n        }\n        if (!trieNode.values) {\n          trieNode.values = measureNames.map(() => 0);\n        }\n        for (const [index, measureIndex] of measureIndices.entries()) {\n          trieNode.values[index] += row.values[measureIndex];\n        }\n      });\n\n    const result: ResultRow[] = [];\n    const labelList: string[] = [];\n    const traverseNode = (node: TrieNode) => {\n      if (node.values) {\n        result.push({\n          categories: new Map(\n            labelList.map((label, index) => [categoryNames[index], label]),\n          ),\n          values: new Map(\n            node.values.map((value, index) => [measureNames[index], value]),\n          ),\n        });\n      } else {\n        for (const [label, child] of Object.entries(node.children)) {\n          labelList.push(label);\n          traverseNode(child);\n          labelList.pop();\n        }\n      }\n    };\n    traverseNode(categoryTrie);\n    this.normalizeNthDay(result, categoryNames);\n    this.sortResults(\n      result,\n      categoryNames,\n      measureNames,\n      sortBy ?? [...categoryNames, ...measureNames],\n    );\n    return result;\n  }\n\n  private normalizeNthDay(rows: ResultRow[], categoryNames: string[]) {\n    if (!categoryNames.includes('nthDay')) {\n      return;\n    }\n    const largestNthDay = Math.max(...rows.map(row => row.categories.get('nthDay') as number));\n    for (const row of rows) {\n      const nthDay = row.categories.get('nthDay') as number;\n      row.categories.set('nthDay', largestNthDay - nthDay);\n    }\n  }\n\n  private sortResults(\n    results: ResultRow[],\n    categoryNames: string[],\n    measureNames: string[],\n    sortBy: string[],\n  ) {\n    function getComparator(sortConcept: string) {\n      if (categoryNames.includes(sortConcept)) {\n        return (a: ResultRow, b: ResultRow) => {\n          const aCategory = a.categories.get(sortConcept)!;\n          const bCategory = b.categories.get(sortConcept)!;\n          if (aCategory < bCategory) {\n            return -1;\n          }\n          if (aCategory > bCategory) {\n            return 1;\n          }\n          return 0;\n        };\n      }\n      if (measureNames.includes(sortConcept)) {\n        return (a: ResultRow, b: ResultRow) =>\n          a.values.get(sortConcept)! - b.values.get(sortConcept)!;\n      }\n      return () => 0;\n    }\n\n    const comparators = sortBy.map(getComparator);\n    const combinedComparator = (a: ResultRow, b: ResultRow) => {\n      for (const comparator of comparators) {\n        const result = comparator(a, b);\n        if (result !== 0) {\n          return result;\n        }\n      }\n      return 0;\n    };\n    results.sort(combinedComparator);\n  }\n}\n\ninterface TrieNode {\n  children: Record<string, TrieNode>;\n  values?: number[];\n}\n","import { Category, Filter, Row } from './types';\n\nconst millisecondsPerDay = 24 * 60 * 60 * 1000;\n\nexport function betweenDates(startDate: Date, endDate: Date): Filter {\n  return (categories: Category[]) => {\n    const nThDayIndex = categories.findIndex(\n      category => category.name === 'nthDay',\n    );\n    const startIndex = Math.round(\n      (Date.now() - startDate.getTime()) / millisecondsPerDay,\n    );\n    const endIndex = Math.round(\n      (Date.now() - endDate.getTime()) / millisecondsPerDay,\n    );\n    return (row: Row) =>\n      row.header[nThDayIndex] <= startIndex &&\n      row.header[nThDayIndex] >= endIndex;\n  };\n}\n","import * as random from 'random';\nimport {\n  Category,\n  CategoryValue,\n  HitGenerationSettings,\n  Measure,\n  MeasureType,\n  ModelSettings,\n  Row,\n  Scope,\n  SessionGenerationSettings,\n} from './types';\nimport { DataCube } from './data-cube.model';\n\n/**\n * Creates fake analytics data based on the model given by settings.\n *\n * The fake data is returned as a Cube. See [cube.ts](./cube.ts) for more\n * information on the properties of the cube.\n *\n * The shape of the cube is determined by the categories and measures that are\n * passed in. The content is generated based on `settings`. For details on\n * what each property in settings does, see the documentation for the settings\n * type in [types.ts](./types.ts).\n *\n * The nthDay category is added to the categories if not present. The number of\n * values is determined by the `days` setting and the weight of each day is\n * determined according to the dailyVariance setting.\n *\n * The data is generated as a series of hits. Each hit is randomly assigned\n * to a category value for each category, based on the weights for each value.\n *\n * The hit is then added to a measure if it is a hit scoped measure, or if it\n * is a session scoped measure and part of a new session or if it is a user\n * scoped measure and represents a new user. For measures of type COUNT, they\n * are incremented by 1, whereas for measures of type SUM a random value in its\n * range is selected and added to the measure for that combination of category\n * values.\n *\n * This generation code makes the following assumptions:\n *  - All categories are independent of each other.\n *  - Each hit has a corresponding category value for each dimension.\n *  - The number of users is normally distributed, with mean settings.avgUsers\n *    and standard deviation settings.usersStdDev.\n *  - The number of sessions per user is normally distributed with mean\n *    settings.avgUsersPerSession and standard deviation settings.sessionsPerUserStdDev.\n *  - The number of hits is normally distributed with mean settings.avgHits\n *    and standard deviation settings.hitsStdDev.\n *  - The value of each hit for measures of type SUM is uniformly distributed in\n *    its range.\n *  - The session a hit belongs to is uniformly distributed.\n *  - The weight of a day is normally distributed with mean 1 and standard\n *    deviation settings.dailyStdDev\n *\n */\nexport function generateCube(\n  categories: Category[],\n  measures: Measure[],\n  settings: Partial<ModelSettings> = {},\n): DataCube {\n  const completeSettings: ModelSettings = {\n    ...defaultSettings,\n    ...settings,\n  };\n  const actualCategories = [...categories];\n  if (completeSettings.nthDay) {\n    const nthDayCategory = generateNthDay(\n      completeSettings.days,\n      completeSettings.dailyStdDev,\n    );\n    actualCategories.push(nthDayCategory);\n  }\n  const rows = generateEmptyRows(actualCategories, measures);\n  const cumulativeWeights = generateCumulativeWeights(rows, actualCategories);\n\n  generateHits(\n    rows,\n    measures,\n    cumulativeWeights,\n    generateUsersAndSessions(completeSettings),\n    completeSettings,\n  );\n\n  return new DataCube(rows, measures, actualCategories);\n}\n\nconst defaultSettings: ModelSettings = {\n  avgHits: 1000000,\n  hitStdDev: 10000,\n  avgUsers: 10000,\n  userStdDev: 100,\n  avgSessionsPerUser: 5,\n  sessionsPerUserStdDev: 3,\n  nthDay: true,\n  days: 60,\n  dailyStdDev: 0.1,\n};\n\ninterface User {\n  rowsSeen: Set<number>;\n}\n\ninterface Session {\n  user: User;\n  rowsSeen: Set<number>;\n}\n\nfunction generateUsersAndSessions({\n                                    avgUsers,\n                                    userStdDev,\n                                    avgSessionsPerUser,\n                                    sessionsPerUserStdDev,\n                                  }: SessionGenerationSettings) {\n  const userCount = Math.round(random.normal(avgUsers, userStdDev)());\n  const sessionThunk = random.normal(avgSessionsPerUser, sessionsPerUserStdDev);\n  const sessions: Session[] = [];\n  for (let i = 0; i < userCount; i++) {\n    const user = { rowsSeen: new Set<number>() };\n    const userSessions = Math.round(sessionThunk());\n    for (let j = 0; j < userSessions; j++) {\n      sessions.push({ user, rowsSeen: new Set() });\n    }\n  }\n  return sessions;\n}\n\nfunction getNormalizedWeights(categories: Category[]) {\n  return categories.map(category => {\n    const total = category.values.reduce((accumulator, value) => value.weight + accumulator, 0);\n    return category.values.map(value => value.weight / total);\n  });\n}\n\nfunction binarySearch(\n  arr: number[],\n  probe: number,\n  start = 0,\n  end = arr.length,\n): number {\n  const len = end - start;\n  if (len < 2) {\n    return start;\n  }\n  const index = len % 2 === 0 ? (start + end) / 2 : (start + end - 1) / 2;\n  if (arr[index] <= probe) {\n    return binarySearch(arr, probe, index, end);\n  } else {\n    return binarySearch(arr, probe, start, index);\n  }\n}\n\nfunction generateMeasureIncrement(measure: Measure) {\n  if (measure.type === MeasureType.COUNT || !measure.range) {\n    return 1;\n  }\n  return random.float(measure.range[0], measure.range[1]);\n}\n\nfunction generateHits(\n  rows: Row[],\n  measures: Measure[],\n  cumulativeWeights: number[],\n  sessions: Session[],\n  { avgHits, hitStdDev }: HitGenerationSettings,\n) {\n  const hitTotal = Math.round(random.normal(avgHits, hitStdDev)());\n  const placementThunk = random.uniform();\n  const sessionThunk = random.uniformInt(0, sessions.length - 1);\n  for (let i = 0; i < hitTotal; i++) {\n    const placement = placementThunk();\n    const session = sessionThunk();\n    const rowIndex = binarySearch(cumulativeWeights, placement);\n    for (const [index, measure] of measures.entries()) {\n      const newSession = !sessions[session].rowsSeen.has(rowIndex);\n      const newUser = !sessions[session].user.rowsSeen.has(rowIndex);\n      if (newSession) {\n        sessions[session].rowsSeen.add(rowIndex);\n        if (newUser) {\n          sessions[session].user.rowsSeen.add(rowIndex);\n        }\n      }\n\n      switch (measure.scope) {\n        case Scope.EVENT:\n          rows[rowIndex].values[index] += generateMeasureIncrement(measure);\n          break;\n        case Scope.SESSION:\n          if (newSession) {\n            rows[rowIndex].values[index] += generateMeasureIncrement(measure);\n          }\n          break;\n        case Scope.USER:\n          if (newUser) {\n            rows[rowIndex].values[index] += generateMeasureIncrement(measure);\n          }\n          break;\n      }\n    }\n  }\n}\n\nfunction generateEmptyRows(categories: Category[], measures: Measure[]) {\n  const rows: Row[] = [];\n\n  // The current index in each category of which value we've looked at\n  const categoryValueIndices = categories.map(() => 0);\n  let categoryIndex = 0;\n  // This is going to loop through all combinations of category values.\n  // The approach we take is to iterate through all the first category's values.\n  // Then we move to the next value in the second category and iterate through\n  // all the values in the first category again. We then move to the next value\n  // in the second category, and repeat again and again until we've gone through\n  // all the values in the second category. We then move to the next value\n  // in the third category, then repeat, and so on and so on until we've gone\n  // through every possible value.\n  do {\n    // Get the current combination of values and add them to the list\n    const header = categories.map(\n      (category, index) => category.values[categoryValueIndices[index]].name,\n    );\n    const values = measures.map(() => 0);\n    rows.push({ header, values });\n\n    // Start with the first category\n    categoryIndex = 0;\n    do {\n      // Advance to the next category value in the current value\n      categoryValueIndices[categoryIndex] =\n        (categoryValueIndices[categoryIndex] + 1) %\n        categories[categoryIndex].values.length;\n      categoryIndex += 1;\n      // If we wrapped around to the beginning of the list of values for the\n      // current category, move to the next category so that its value can\n      // be incremented\n    } while (\n      categoryValueIndices[categoryIndex - 1] === 0 &&\n      categoryIndex < categories.length\n      );\n    // If we ended up with the first value in the previous category, then\n    // that means we ran off the end of the list of possible categories, so\n    // we should end the loop\n  } while (categoryValueIndices[categoryIndex - 1] !== 0);\n  return rows;\n}\n\nfunction generateCumulativeWeights(rows: Row[], categories: Category[]) {\n  const weights = getNormalizedWeights(categories);\n  const nameToWeightMapping = categories.map(\n    (category, categoryIndex) =>\n      new Map(\n        category.values.map((value, index) => [\n          value.name,\n          weights[categoryIndex][index],\n        ]),\n      ),\n  );\n  return rows.reduce(\n    (cumulativeWeights, row) => {\n      const rowWeights = row.header.map((label, categoryIndex) => nameToWeightMapping[categoryIndex].get(label) ?? 0);\n      const weightDelta = rowWeights.reduce((accumulator, weight) => accumulator * weight, 1);\n      cumulativeWeights.push(weightDelta + cumulativeWeights[cumulativeWeights.length - 1]);\n      return cumulativeWeights;\n    },\n    [0],\n  );\n}\n\nfunction generateNthDay(days: number, dailyVariance: number): Category {\n  const dailyThunk = random.normal(1, dailyVariance);\n  const values: CategoryValue[] = [];\n  for (let day = 0; day < days; day++) {\n    values.push({\n      name: day,\n      weight: dailyThunk(),\n    });\n  }\n  return {\n    name: 'nthDay',\n    values,\n  };\n}\n","import { Category, Measure, MeasureType, Scope } from './types';\n\nexport const countryCategory: Category = {\n  name: 'country',\n  values: [\n    {\n      name: 'Canada',\n      weight: 2,\n    },\n    {\n      name: 'USA',\n      weight: 16,\n    },\n    {\n      name: 'Mexico',\n      weight: 15,\n    },\n  ],\n};\n\nexport const browserCategory: Category = {\n  name: 'browser',\n  values: [\n    {\n      name: 'Chrome',\n      weight: 50,\n    },\n    {\n      name: 'Firefox',\n      weight: 19,\n    },\n    {\n      name: 'Safari',\n      weight: 20,\n    },\n    {\n      name: 'Edge',\n      weight: 10,\n    },\n  ],\n};\n\nexport const sourceCategory: Category = {\n  name: 'source',\n  values: [\n    {\n      name: 'Direct',\n      weight: 5,\n    },\n    {\n      name: 'Email',\n      weight: 5,\n    },\n  ],\n};\n\nexport const activeUserMeasure: Measure = {\n  name: 'activeUsers',\n  scope: Scope.USER,\n  type: MeasureType.COUNT,\n};\n\nexport const revenueMeasure: Measure = {\n  name: 'revenue',\n  scope: Scope.EVENT,\n  type: MeasureType.SUM,\n  range: [0, 10],\n};\n\nexport const eventCountMeasure: Measure = {\n  name: 'eventCount',\n  scope: Scope.EVENT,\n  type: MeasureType.SUM,\n};\n","/** A description of a type of value that a hit can belong to. */\nexport interface Category {\n  /** The canonical name for this category. */\n  name: string;\n\n  /** The possible values the category can take on. */\n  values: CategoryValue[];\n}\n\n/** Describes a possible value a category can have. */\nexport interface CategoryValue {\n  /** A label for this particular value */\n  name: string | number;\n\n  /**\n   * How likely this value is to occur, relative to the other values in this\n   * category.\n   */\n  weight: number;\n}\n\n/** A value that can be measured. */\nexport interface Measure {\n  /** The canonical name for this measure. */\n  name: string;\n  /** If this measure applies to events, sessions or users. */\n  scope: Scope;\n  /** How the values from this measure are calculated. */\n  type: MeasureType;\n  /**\n   * The range of values this measure can take on per hit, if the measure\n   * is of type SUM.\n   */\n  range?: [number, number];\n}\n\n/** The way this measure is calculated */\nexport enum MeasureType {\n  COUNT,\n  SUM,\n}\n\n/** What this measure is associated with. */\nexport enum Scope {\n  EVENT,\n  SESSION,\n  USER,\n}\n\n/**\n * Used to control the model for data generation. More details about how this\n * is used is available in [generation.ts](./generation.ts).\n */\nexport type ModelSettings = HitGenerationSettings &\n  SessionGenerationSettings &\n  NthDayGenerationSettings;\n\nexport interface HitGenerationSettings {\n  /** The average number of hits over the lifetime of the data generation. */\n  avgHits: number;\n  /** The standard deviation of hits over the time lifetime of the data generation. */\n  hitStdDev: number;\n}\n\nexport interface SessionGenerationSettings {\n  /** The average number of users for this data generation. */\n  avgUsers: number;\n  /** The standard deviation of users for this data generation. */\n  userStdDev: number;\n  /** The average number of sessions per user. */\n  avgSessionsPerUser: number;\n  /** The standard deviation of sessions per user. */\n  sessionsPerUserStdDev: number;\n}\n\nexport interface NthDayGenerationSettings {\n  /** Whether to generate nth day category or not */\n  nthDay: boolean;\n  /** The number of days worth of data to generate. */\n  days: number;\n  /** How much the number of hits can vary from day to day. */\n  dailyStdDev: number;\n}\n\n/**\n * A filter is applied to the data in a cube before being queried.\n *\n * A filter is a factory function that actually generates the filter when\n * called. The idea is that the first call will allow the filter to configure\n * itself with any necessary values, so that the second call can run very\n * quickly on each row.\n */\nexport type Filter = (\n  categories: Category[],\n  measures: Measure[],\n) => (row: Row) => boolean;\n\n/**\n * The internal storage of the cube. Although the cube is conceptually an\n * n-dimensional cube of data, in actuality it is a list of rows, to make for\n * easier querying.\n */\nexport interface Row {\n  /** The category values for this row. */\n  header: (string | number)[];\n  /** The measure values for this row. */\n  values: number[];\n}\n\n/**\n * The data returned from a query to a cube. The category and measure values\n * are stored in a map keyed on the name of the respective category or\n * dimension.\n */\nexport interface ResultRow {\n  categories: Map<string, string | number>;\n  values: Map<string, number>;\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-audification-experiment',\n  templateUrl: './audification-experiment.component.html',\n})\nexport class AudificationExperimentComponent {\n}\n","<app-line-chart measureName=\"activeUsers\"></app-line-chart>\n","import { NgModule } from '@angular/core';\nimport { AudificationExperimentComponent } from './audification-experiment.component';\nimport { LineChartModule } from '../../components/line-chart/line-chart.module';\n\n@NgModule({\n  declarations: [\n    AudificationExperimentComponent,\n  ],\n  imports: [\n    LineChartModule,\n  ],\n  exports: [\n    AudificationExperimentComponent,\n  ],\n})\nexport class AudificationExperimentModule {\n}\n","import { NgModule } from '@angular/core';\nimport { AudificationService } from './audification.service';\n\n@NgModule({\n  providers: [\n    AudificationService,\n  ],\n})\nexport class AudificationModule {\n}\n","import * as Tone from 'tone';\n\nexport class AudificationService {\n  protected synth = new Tone.Synth().toDestination();\n\n  audify(\n    values: (number | null)[],\n    pitchRange: [number, number],\n    duration: number,\n  ) {\n    const part = new Tone.Part(\n      (time, event) => {\n        this.synth.triggerAttackRelease(event.note, event.dur, time);\n      },\n      [\n        { time: 0, note: 'C4', dur: '4n' },\n        { time: { '4n': 1, '8n': 1 }, note: 'E4', dur: '8n' },\n        { time: '2n', note: 'G4', dur: '16n' },\n        { time: { '2n': 1, '8t': 1 }, note: 'B4', dur: '4n' },\n      ],\n    );\n    part.start(0);\n    Tone.Transport.start();\n\n    return () => {\n      part.dispose();\n      Tone.Transport.stop();\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { DataService } from './data.service';\n\n@NgModule({\n  providers: [\n    DataService,\n  ],\n})\nexport class DataModule {\n}\n","import { DateTime } from 'luxon';\nimport {\n  activeUserMeasure,\n  browserCategory,\n  countryCategory,\n  eventCountMeasure,\n  revenueMeasure,\n  sourceCategory,\n} from '../../models/data-cube/presets';\nimport { betweenDates } from '../../models/data-cube/filters';\nimport { generateCube } from 'src/models/data-cube/generation';\n\nexport class DataService {\n  private dataCube = generateCube(\n    [countryCategory, browserCategory, sourceCategory],\n    [activeUserMeasure, revenueMeasure, eventCountMeasure],\n    {\n      avgHits: 10000,\n      hitStdDev: 100,\n      avgUsers: 100,\n      userStdDev: 1,\n      avgSessionsPerUser: 5,\n      sessionsPerUserStdDev: 3,\n    },\n  );\n\n  getMeasureOverDays(measureName: string, days = 30) {\n    const categoryName = 'nthDay';\n    const endDate = DateTime.local();\n    const startDate = endDate.minus({ day: days });\n\n    return this.dataCube\n      .getDataFor(\n        [categoryName],\n        [measureName],\n        [betweenDates(startDate.toJSDate(), endDate.toJSDate())],\n      )\n      .map(row => ({\n        date: startDate\n          .plus({ days: row.categories.get(categoryName) as number })\n          .toJSDate(),\n        value: row.values.get(measureName)!,\n      }));\n  }\n}\n","/* (ignored) */"]}